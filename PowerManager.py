# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10EWZxkWmEco6An3NU5M1NgqfO0Xi62Tr
"""

import firebase_admin
from firebase_admin import firestore
from firebase_admin import credentials
import datetime

class PowerManager():

    def __init__(self,player,user='Defo'):
        self.JSON_PATH = 'apg-project-6e243-firebase-adminsdk-npc8j-bce3fb0771.json' #認証キーのパス
        self.user_id=f'{user}AI{1 if player else 2}'
        self.player=player

        #同じ名前があれば別のものにする
        while self.user_id in firebase_admin._apps.keys():
            self.user_id=f'{self.user_id}_new'

        #認証キーの設定とfirebaseへの接続
        cred = credentials.Certificate(self.JSON_PATH) #認証キーを取得
        self.fa=firebase_admin.initialize_app(cred,name=self.user_id)
        print(f"id:{self.user_id}のマネージャーが作成されました")



    def reconnect(self):
        if not self.user_id in firebase_admin._apps.keys():
            cred = credentials.Certificate(self.JSON_PATH) #認証キーを取得
            self.fa=firebase_admin.initialize_app(cred,name=self.user_id)
            print(f"{self.user_id}のマネージャーは再接続成功した")
        else:
            print(f"{self.user_id}のマネージャーはすでに接続しています。")



    def askLevel(self, wait: float, time: str = "now") -> int:
        """
        AIのレベルを決定する関数。
        変数waitは過去何秒のデータを参照するかである。
        レベルを1~5でintで返すが変更可能。エラーがある場合必ず真ん中のレベルが返される。
        変数timeはUTS時間で'%Y-%m-%d %H:%M:%S'で入力すると時間を指定可能。
        """

        list_a=[]
        list_b=[]


        #比較用時間取得
        if(time=="now"):
            now=datetime.datetime.now(datetime.timezone.utc)
        else:
            try:
                set_time=datetime.datetime.strptime(time, '%Y-%m-%d %H:%M:%S')
                now=set_time.astimezone(datetime.timezone.utc)
            except ValueError as e:
                print(e)
                set_time=datetime.datetime.max
                now=set_time.astimezone(datetime.timezone.utc)


        #接続とpushデータ取得
        try:
            #データの取得
            if not self.user_id in firebase_admin._apps.keys():
                cred = credentials.Certificate(self.JSON_PATH) #認証キーを取得
                self.fa=firebase_admin.initialize_app(cred,name=self.user_id)
                print(f"{self.user_id}のマネージャーは接続確認できなかったので再接続した")

            db = firestore.client(self.fa) #データベースの取得
            docs = db.collection('click_count_debug').get() #db.collection().get()でデータベース内の全データをlistで取得

            for doc in docs:
                #doc.to_dict()で各データを辞書型で取得
                mydict = doc.to_dict()
                if( now - mydict['date'] < datetime.timedelta(seconds=wait) ):
                    list_a.append(mydict['button1'])
                    list_b.append(mydict['button2'])

        except ValueError as e:
                print(e)

        ##それぞれ押された回数を計算
        sum_ai_one=sum(list_a)
        sum_ai_two=sum(list_b)



        if sum_ai_one==0 and sum_ai_two==0:#0で割る対策
            if list_a==[]:
                print(f"読み込みデータなし")
            ratio=0.5
        else:
            ratio = sum_ai_one / (sum_ai_one + sum_ai_two)

        if (self.player):
            ratio= 1-ratio

        #レベル算出
        level=self.ratio_to_level(ratio)

        #変更報告
        print(f'Player{1 if self.player else 2} set Level{level}')
        return level



    def ratio_to_level(self,ratio):
        """
        レベルをレートで変える関数。
        レベルの境目となる倍率のリストから線対象につくる。
        """
        magni=[1.5,2]#1以上昇順の倍率リスト

        recip=[1/x for x in magni]
        magni.reverse()
        magni.extend(recip)
        magni.append(0)

        level=0
        while ratio>self.magnification_to_raito(magni[level]):
            level+=1
        level+=1

        return level


    def magnification_to_raito(self,magni):
        return 1/(1+magni)

    def disconnect(self):
        if self.user_id in firebase_admin._apps.keys():
            firebase_admin.delete_app(self.fa)
            print(f"{self.user_id}のマネージャーは無事接続解除されました")
        else:
            print(f"{self.user_id}のマネージャーは解除はもうされています")

    def __del__(self):
        self.disconnect()
        print(f"{self.user_id}のマネージャーは無事に削除されました")